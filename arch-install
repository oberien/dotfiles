#!/bin/bash

# Encryption Setup:
# * Attacker Model: https://md.statshelix.com/kVCPl8VFSnm69WH504T-0g
# * General Idea:
#     * boot-partition on a USB-stick
#     * keyfiles on the same USB-stick
#     * (live archiso on the same USB-stick)
#     * keyfiles parition encrypted with LUKS using a memorized password
#     * even though the swap partition is encrypted with a static key, hibernation
#       is not (yet) supported with these instructions, but support can be added later on.
# * OPAL:
#     * use the SSDs SED (self-encrypting drive) functionality
#     * faster than LUKS if the SSD exceeds ~2.5GB/s
#     * has a data key to encrypt all data with
#     * has an authentication key to encrypt data key with
# * LUKS:
#     * use software encryption to encrypt drives or partitions
#     * slower as encryption is done in the CPU instead of on the drive itself
#     * has a data key to encrypt all data with
#     * has authentication keys to encrypt data key with


# Background: Boot Steps
# * CPU init (e.g. Intel Management Engine)
#     * very small initial binary blob which gets executed when the CPU is powered on
#     * performs small initial checks
# * Firmware
#     * POST: Power-on self-test
#     * checks and tests hardware
#     * e.g. memory-training if required
#     * initializes the hardware including switching to 64bit
#     * loads and provides low-level device drivers
#         * most devices have a binary firmware blob stored on them
#         * Firmware loads that blob and executes it
#         * the blob initializes the device
#         * provides the interface for the Firmware to communicate with the device
#         * Firmware can then provide the UEFInterface to the device
# * UEFI
#     * (technically just an interface to communicate with the firmware;
#       the firmware still does all these steps)
#     * reads boot entries from NVRAM to find registered EFI binaries
#     * scans disks to find EFI System Partitions
#     * loads the first configured available option
#     * if it's an EFI binary boot entry: load it
#     * if it's a disk: look for an EFI system partition on the disk and load `\EFI\BOOT\BOOTx64.EFI`
#     * launches the EFI application
# * Bootmanager / Bootloader
#     * usually that EFI application is a bootmanager like grub or gummiboot / systemd-boot
#     * shows different systems / options to select from
#     * once selected, loads that option's efi application
#     * let's assume a linux kernel from now on
#     * `vmlinuz-linux` is the compressed kernel (indicated by the z)
#     * `vmlinuz-linux` contains an EFISTUB to make the kernel an efi application
#     * in case of old MBR-style loading:
#         * unpacks the kernel
#         * stores it at a specific address
#         * loads the initramfs
#         * stores it at a specific address
#         * creates and initializes a boot config struct at a specific address
#         * jumps to a specific address within the kernel
#         * kernel starts executing code from there
#     * in case of EFISTUB:
#         * load and execute the kernel as an efi binary
#         * -> run its EFISTUB
#     * bootloader can be skipped in favour of direcly launching the kernel's  EFISTUB
# * EFISTUB
#     * load initramfs
#         * if files are passed via commandline using `initrd=/foo/bar`,
#           load those from the same partition as the EFISTUB and merge them
#         * if there is an embedded initramfs in the kernel image, load it
#         * if there is neither an initrd parameter nor an embedded initramfs
#           check the `initrdmem=phys_ptr,size` parameter and load the initramfs from there
#     * unpack the initramfs into memory
#     * mount the unpacked initramfs as `/`
#     * exit_boot_services (stop UEFI boot state)
#     * load the kernel
# * Kernel
#     * loads initial linux hardware drivers
#     * initializes hardware for use with linux
#     * starts `/init` as PID 1
# * /init
#     * runs the hooks declared in `/etc/mkinitcpio.conf`
#     * e.g. loads mods
#     * decrypts and mounts partitions
#     * checks the `root=/dev/xxx` kernel parameter and mounts it as `/new_root`
#     * executes `pivot_root` to switch the rootfs from the initramfs to `/new_root`
#     * executes `/bin/init` as PID 1
# * /bin/init
#     * ususally systemd
#     * analyses the dependency graph of all services
#     * starts all its services
#     * starts everything else, possibly including XServer (XOrg or Wayland)

# Displays / Monitors / Video during Boot
# * CPU init
#     * no graphical output, there is no other device than the CPU
# * Firmware
#     * loads and executes the GPU's firmware-blob
#     * displays e.g. POST screen and BIOS settings via it
#     * provides the UEFInterface to the GPU
# * UEFI
#     * provides raw interface (GOP) to write single pixes
#     * provides console interface to print lines
# * Bootmanager / Bootloader
#     * uses those interfaces to display the menu
# * EFISTUB
#     * uses those interface to display the menu
# * Kernel
#     * starts vconsole using the UEFI raw video mode as framebuffer backend
# * /init
#     * if early kernel mode setting: performs KMS as part of /init
#     * if late kernel mode settings: performs KMS after /init before /bin/init
# * kernel mode setting (KMS)
#     * loads the kernel's graphics drivers corresponding to used GPU(s)
#     * initializes all displays including resolution
#     * switches vconsole from UEFI GOP to the GPU drivers
# * /bin/init
#     * uses vconsole (which uses GPU drivers)
# * wayland
#     * uses kernel GPU driver
#     * compositor (which renders windows) controls the resolution
# * XOrg
#     * loads its own userland driver(s) corresponding to used GPU(s)
#     * creates its own framebuffers using those drivers
#     * driver configures each monitor's resolution on-load
#     * randr can change resolutions

# Boot Setup with Encryption:
# * initramfs LUKS single disk with `encrypt` hook:
#     * contains hooks which are executed one after another
#     * we add a hook after `keyboard` and `keymap` (to init our usb-keyboard)
#       before `encrypt` (which decrypts `cryptdevice`)
#     * our hook unlocks the keyfiles-partition
#     * links the correct keyfile to `/crypto_keyfile.bin`
#     * kernel parameters: `cryptdevice=...:system root=/dev/mapper/system`
#     * `encrypt` hook uses `/crypto_keyfile.bin` to decrypt the kernel parameter `cryptdevice`
#     * Advantages:
#         * "simple" setup
#         * works surprisingly well out of the box
#     * Disadvantages:
#         * boot partition unecrypted -> must reside on USB-Stick
#         * boot partition needs to be mounted on every system update
#         * -> one USB-stick per device is required
#         * supports only a single encrypted disk with the root partition
# * initramfs LUKS single disk with `sd-encrypt` hook:
#     * similar to `encryt` hook, but supports multiple cryptdevices via /etc/crypttab.initramfs
#     * similar advantages and disadvantages
# * initramfs LVM in LUKS on multiple disks:
#     * our hook unlocks the keyfiles-partition
#     * runs cryptsetup for each disk to-be-decrypted using the keyfiles
#     * kernel parameters: `root=/dev/vg_lvm/system`
#     * same advantages / disadvantages as initramfs LUKS
# * grub CRYPTODISK shim:
#     * UNTESTED
#     * grub supports multi-stage, where stage 1 decrypts the boot partition
#     * stage 1 loads stage 2 from the now decrypted boot partition
#     * stage 2 starts kernel
#     * Advantages:
#         * same grub stage 1 for all devices
#         * USB-stick doesn't need to be connected and mounted during every system update
#         * -> same USB-stick for all devices
#     * Disadvantages:
#         * complex
#         * only works with LUKS1 (a patched grub with partial LUKS2 support exists)
#         * might not work with opal(?)
#         * might not be possible to dynamically switch between opal setup and
#           LUKS setup depending on the system it's connected to
#         * might need modifications to work
#         * if modifications need to be made to grub, why not write a custom bootloader?
# * custom PBA (pre-boot authenticator) / UEFI bootloader (opal-uefi-greeter):
#     * custom bootloader / bootmanager / bootmenu
#     * custom EFI binary
#     * decrypt keyfile partition
#     * check if there are any OPAL-locked SEDs
#     * if yes: decrypt them using keyfiles and chain-load initramfs
#     * if not: decrypt LUKS drives using keyfiles and chain-load initramfs
#     * Advantages:
#         * fancy
#         * full control
#         * can have any and every feature wanted
#     * Disadvantages:
#         * not an easy general-purpose solution
#         * most complex of the solutions


# This "guide" assumes you have an arch-boostrap image.

# With OPAL, encryption must be set up before partitions.
# With LUKS, first partitions should be set up before applying LUKS to one partition.

# Encryption using OPAL

sedutil-cli --scan
sedutil-cli --query /dev/nvmeX
linuxpba # password `debug`
# if you're lucky and the drive supports SED, it should say "is OPAL NOT LOCKED"
# If you're unlucky, it says "not OPAL".
# In that case either your SSD is too old to support OPAL, or you are even more unlucky.
# You may have just gotten an SSD that supports Pyrite instead of OPAL.
# Now you can be really really fucking sad, go into a corner and cry.
# Trusted Computing Group: "Unlike Opalite SSC, Pyrite SSC does not specify encryption of user data."

# Regenerate data encryption key: PSID reset / crypto erase
# You need the PSID, which is printed on the sticker on the SSD.
# ProTip™: there may be a data-matrix code with the PSID (which doesn't really help
# because you're going to type it on the archiso live system but whatever ¯\_(ツ)_/¯)
sedutil-cli --PSIDrevert <psid> /dev/nvmeX
# should output: `revertTper completed successfully`

sedutil-cli --initialsetup debug /dev/nvmeX
sedutil-cli --enablelockingrange 0 debug /dev/nvmeX
sedutil-cli --setlockingrange 0 lk debug /dev/nvmeX
# OPAL supports that the SSD shows some data when it is not encrypted.
# This can be used to have a PBA on the SDD's MBR.
# When the PC powers on, it sees the PBA EFI binary, loads and executes it,
# which unlocks the drive and reboots.
# As the SSD hasn't lost power, it will stay unlocked.
# After the reboot, the BIOS now sees the actual boot partition and boots Linux.
# The setup here unlocks the SSD with a bootloader on a separate USB-stick,
# so this feature isn't needed.
sedutil-cli --setmbrdone on debug /dev/nvmeX
sedutil-cli --setmbrenable off debug /dev/nvmeX
# check settings
sedutil-cli --query /dev/nvmeX
# test with linuxpba
linuxpba # password `debug`
# should output: `is OPAL Unlocked`
# check settings again; should now say `Locked = N, LockingEnabled = Y`
sedutil-cli --query /dev/nvmeX
# set actual password
# password, i.e. no keyfile:
sedutil-cli --setsidpassword debug <realpassword> /dev/nvmeX
sedutil-cli --setadmin1pwd debug <realpassword> /dev/nvmeX
# If you want to use a keyfile, generate one with exactly 32 bytes e.g. with
# `dd if=/dev/urandom of=/keys/keyfile_opal bs=32 count=1`.
# THIS WON'T WORK WITH linuxpba. IF YOU WANT TO USE linuxpba, USE A PASSWORD.
# Print it in hex using `xxd /keys/keyfile_opal` and verify its length of 32 bytes.
# MAKE SURE THAT IT DOESN'T CONTAIN ANY ZERO-BYTE 00!
# As we can't pass the old password PBKDF2'd and the new password raw, but only
# either both raw or both PBKDF2'd, we need to reset the above test and restart.
sedutil-cli --revertnoerase debug /dev/nvmeX
sedutil-cli --reverttper debug /dev/nvmeX
# Now do the same steps as above until excluding linuxpba
# using `-n` and passing the hex-encoded keyfile-content.
sedutil-cli -n --initiasetup $'\xAA\xBB\xCC...' /dev/nvmeX
# ...

# reboot and make sure the drive can be unlocked correctly

# There might be a problem with suspend if the platform cuts power to the ssd
# when suspending to mem. sedutil-sleep (a fork) might be of help, but I
# didn't encounter this problem with my laptop as the firmware seems to keep
# the ssd powered during suspend-to-ram.


# partition variables
BOOTPARTITION=/dev/device1
SWAPPARTITION=/dev/device2
SYSTEMPARTITION=/dev/device3
SWAP=/dev/mapper/swap
SYSTEM=/dev/mapper/system

loadkeys de-latin1
setfont lat9w-16

# setup partitions
# If there is a windows instance installed on an msdos partition table, and for
# whatever reason you actually want to keep that winodws,
# change to gpt and recreate the windows partition with the exact same sectors.
#
# If using OPAL, boot isn't needed.
fdisk /dev/device
    # GPT, needed for EFI
    g
    # boot (EFI)
    n
        1
        default
        +500M
    t
        1
    # SWAP not necessarily needed, sometimes even counterproductive
    n
        2
        default
        +32G
    t
        2
        19
    # Linux System
    n
        3
        default
        default
    w


# Encryption using LUKS

# If using lvm, use name "lvm" instead of "system" below

# generate random keys for keyfiles
dd if=/dev/urandom of=keyfile_system bs=4096 count=1
dd if=/dev/urandom of=keyfile_swap bs=4096 count=1

# If no keyfile is wanted on an external drive, leave out -d keyfile.
cryptsetup -vd keyfile_system luksFormat $SYSTEMPARTITION
cryptsetup open -d keyfile_system $SYSTEMPARTITION system
# If swap should not be encrypted, leave out this step.
# If no keyfile is wanted on an external drive, leave out -d keyfile. UNTESTED
cryptsetup -vd keyfile_swap luksFormat $SWAPPARTITION
cryptsetup open -d keyfile_swap $SWAPPARTITION swap

# for lvm (above use cryptsetup open with name "lvm" instead of "system")
pvcreate /dev/mapper/lvm
vgcreate vg_lvm /dev/mapper/lvm
lvcreate -L 500G vg_lvm -n system /dev/mapper/lvm
# raid1: lvcreate --type raid1 --mirrors 1 -L 200G vg_lvm -n home /dev/mapper/lvm /dev/mapper/lvm2
# if raid is used, add the modules dm_raid and raid1 to /etc/mkinitcpio.conf
lvcreate -L 200G vg_lvm -n home /dev/mapper/lvm
# convert to raid1 later on: lvconvert --type raid1 --mirrors 1 vg_lvm/home /dev/mapper/lvm /dev/mapper/lvm2
... others


# Filesystems

mkfs.ext4 $SYSTEM
# boot
mkfs.fat -F32 $BOOTPARTITION
# swap
# If swap was set up without encryption, use $SWAPPARTITION instead of $SWAP.
mkswap $SWAP
swapon $SWAP


# Actual Installation

# mount everything
# lvm: mount /dev/vg_lvm/system /mnt
mount $SYSTEM /mnt
# skip if not using a boot-partition
mkdir /mnt/boot
mount $BOOTPARTITION /mnt/boot


# UNTESTED: For a setup with wayland and sway install
# `wayland sway xorg-xwayland swaylock swayidle swaybg dmenu i3status acpilight` instead of the `i3 xorg-*` packages.
# `sudo gpasswd -a NAME video`
# UNTESTED: For a setup with gnome and wayland install
# `gnome gnome-extra` instead of the `i3 xorg-*` packages.
# Using gnome you need to have `exec gnome-session` in you .xinitrc.
# For xorg and i3 use the below.
pacstrap -i /mnt base base-devel linux-zen linux-zen-headers linux-firmware zsh git net-tools inetutils xorg-xserver xorg-xinit xorg-apps rxvt-unicode i3 dmenu gvim cmake


genfstab -U /mnt > /mnt/etc/fstab
# make sure everything is correct
# add the following:
# # /tmp as ramdisk
# tmpram    /tmp    tmpfs    defaults    0 0
#
# # /home/<user>/Downloads as ramdisk
# downloadram    /home/<user>/Downloads    tmpfs    defaults    0 0
vim /mnt/etc/fstab

arch-chroot /mnt /bin/zsh

# locale
nano /etc/locale.gen # uncomment en_US.UTF-8 UTF-8 or the language of your choice
locale-gen
echo LANG=en_US.UTF-8 > /etc/locale.conf # use the uncommented language here
echo -e "KEYMAP=de-latin1\nFONT=lat9w-16" > /etc/vconsole.conf
ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
hwclock --systohc --utc

# hostname
echo myhostname > /etc/hostname
nano /etc/hosts # add 'myhostname' to end of each line

# setup boot if not using custom bootloader
bootctl install
bootctl update

# create user
useradd NAME -m -g users -G wheel -s /bin/zsh 
passwd NAME
nano /etc/sudoers # uncomment %wheel
# Using the group sudo may work as well (@main--), but I only had success with wheel.

# dotfiles 'n stuff
  # change user to created one
  # setup dotfiles
  # if using lvm, add the "lvm2" hook after the "encrypt" hook in dotfiles/paranoid/mkinitcpio.conf
  # setup paranoid_link if an external drive is used to store the encryption keys
  # edit files for paranoid stuff

# generate bootimage and entries
mkinitcpio -p linux-zen
# if using lvm, use cryptdevice=...:lvm root=/dev/vg_lvm/system
# if using custom bootloader, do what is needed
cat <<_EOF_ > /boot/loader/entries/arch.conf
title       Arch Linux
linux       /vmlinuz-linux
initrd      /intel-ucode.img # or amd-ucode
initrd      /initramfs-linux.img
options     cryptdevice=$SYSTEMPARTITION:system root=$SYSTEM
_EOF_

# If multiple entries exist, timeout should be non-zero
cat <<_EOF_ > /boot/loader/loader.conf
default arch
timeout 0
_EOF_

# TODO
# If there is a dual-boot Windows, which doesn't show up automatically
cat <<_EOF_ > /boot/loader/entries/windows.conf
title Windows
_EOF_

# pikaur instead of aurman, because aurman became weird after a few updates
# aurman instead of pacaur, because pacaur is ded since pacman 5.1.0
# pacaur instead of yaourt, because it's secure™
# adapted from https://gist.github.com/Tadly/0e65d30f279a34c33e9b
mkdir -p /tmp/pikaur_install
pushd /tmp/pikaur_install
sudo pacman -S python expac python-requests git python-regex python-dateutil pyalpm python-feedparser --noconfirm --needed
git clone https://aur.archlinux.org/pikaur.git .
makepkg PKGBUILD --install --needed
popd
rm -rf /tmp/pikaur_install

pacman -S intel-ucode amd-ucode

# graphics drivers including hwdec
pacman -S libva-utils glxinfo
# amd
pacman -S mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver mesa-vdpau lib32-mesa-vdpau
# intel
pacman -S mesa lib32-mesa xf86-video-intel vulkan-intel intel-media-driver 
# nvidia
pacman -S nvidia nvidia-utils lib32-nvidia-utils

# alacritty, nushell, delta
pacman -S alacritty
pikaur -S xcwd # when using XOrg
pikaur -S nushell-git # use https://github.com/oberien/nushell.git for now until #2296 is merged
pikaur -S git-delta-bin

# important packets
pacman -S python3
pacman -S python2
pacman -S arandr
pacman -S ttf-dejavu
pikaur -S ttf-symbola
pacman -S wget
pacman -S openssh
pacman -S openvpn

# screenshots on wayland
pacman -S wl-copy slurp grim jq

# make aur builds faster
# add `MAKEFLAGS="-j$(nproc)"`
nano /etc/makepkg.conf

# setup neo-layout
localectl set-keymap --no-convert neo
localectl set-x11-keymap --no-convert neo

# network
systemctl enable systemd-resolved
systemctl start systemd-resolved
# LAN - configure in /etc/systemd/{network.conf,network/*}
systemctl enable systemd-networkd
systemctl start systemd-networkd
# WLAN
pacman -S iwd dhcpcd
pikaur -S iwgtk
systemctl enable iwd dhcpcd
systemctl start iwd dhcpcd

# ntp
pacman -S ntp
systemctl enable ntpd
systemctl start ntpd

# ibus
pacman -S ibus
# if not there add `exec ibus-daemon -drx` to your i3-config
# if not there, add the following lines to `/etc/environment`
GTK_IM_MODULE=ibus
QT_IM_MODULE=ibus
XMODIFIERS=@im=ibus

# plover
pikaur -S plover-git
sudo gpasswd -a `whoami` uucp
# configure plover for Gemini and to start on boot

# notification daemon
pacman -S dunst

# browser
pikaur -S vivaldi
pacman -S firefox
pacman -S gst-libav

# useful others
pikaur -S urxvt-font-size-git
pacman -S zathura zathura-pdf-mupdf
# X11
pacman -S feh
# wayland
pacman -S imv
pacman -S imagemagick
pacman -S htop iotop
pacman -S unzip
pacman -S nmap
pacman -S mlocate
pacman -S fd
pacman -S ripgrep
pacman -S gedit
pacman -S tree
pacman -S dosfstools
pacman -S squashfs-tools
pacman -S ntfs-3g
pacman -S ncdu

# media
pacman -S mpd
pacman -S mpc
pacman -S mpv

# others
pacman -S ffmpeg
pacman -S mumble
pacman -S pavucontrol
pikaur -S pulseaudio-ctl
pacman -S thunderbird

# enable multilib in /etc/pacman.conf
pacman -Syu

# Sound
pacman -S realtime-privileges
gpasswd -a $USER realtime
pacman -S lsp-plugins
# pulse
pacman -S pulseaudio
# jack
pacman -S cadence carla jack2 lib32-jack2 pulseaudio-jack
# comment out the `Exec=`-line in /usr/share/dbus-1/services/org.jackaudio.service
# pipewire
pacman -S easyeffects lib32-pipewire lib32-pipewire-jack pipewire pipewire-alsa pipewire-jack pipewire-pulse wireplumber carla
# sof-firmware might be needed if the sof driver is used (lspci -v)

# obs / webcam
pacman -S obs-studio
# webcam loopback
pacman -S v4l2loopback-dkms
pikaur -S obs-v4l2sink
sudo modprobe v4l2loopback devices=1 video_nr=10 card_label="OBS Cam" exclusive_caps=1

# xmpp
pacman -S gajim python-axolotl python-pillow
# Plugins: OMEMO, Url image preview

# mysql
pacman -S mariadb
sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
mysql_secure_installation
pacman -S dnsutils

# steam
pikaur -S steam

# other fonts used for games/wine/vim
pikaur -S ttf-tahoma
pikaur -S ttf-ms-fonts
pikaur -S ttf-dejavu-sans-mono-powerline-git

# java
pacman -S jdk8-openjdk
pacman -S openjdk8-src
pacman -S openjdk8-doc
pikaur -S intellij-idea-ultimate-edition intellij-idea-ultimate-edition-jre

# rust
pacman -S rustup

# maybe
pacman -S gparted
pacman -S gucharmap

# cups (not working ☹)
pacman -S avahi
pacman -S cups
sudo gpasswd -a `whoami` lp
sudo gpasswd -a `whoami` sys
# drivers, install required ones
pacman -S gutenprint # Canon, Epson, Lexmark, Sony, Olympus, PCL
pacman -S foomatic foomatic-db foomatic-db:engine, foomatic-db-ppd foomatic-filters
pacman -S hplip # HP
pacman -S splix # Samsung
pacman -S cups-pdf # Print to PDF
systemctl enable avahi-dnsconfd.service
systemctl enable org.cups.cupsd.service
systemctl enable cups-browsed.service
systemctl start avahi-dnsconfd.service
systemctl start org.cups.cupsd.service
systemctl start cups-browsed.service
